name: Main

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master
      - release-*

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run build for any PRs.
  pull_request:

env:
  IMAGE_NAME: ks-console
  DOCKERHUB_REPO: kubespheredev

jobs:
  build-and-push:
    runs-on: self-hosted

    strategy:
      matrix:
        node-version: [12.x]

    steps:
    - uses: actions/checkout@v1

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install Dependencies
      run: yarn

    - name: Build
      run: yarn build

    - name: Test
      run: yarn test
    
    - name: Build preview image
      if: github.event_name == 'pull_request'
      run: |
        PR_ID=$(echo "${{ github.ref }}" | sed -e 's,.*/\([0-9]*\)/.*,\1,')
        docker build . --file Dockerfile --tag ks-console-pr-$PR_ID

    - name: Deploy preview image
      if: github.event_name == 'pull_request'
      run: |
        echo 'Deploy to ks cluster'
        PR_ID=$(echo "${{ github.ref }}" | sed -e 's,.*/\([0-9]*\)/.*,\1,')
        /bin/bash ~/scripts/deploy.sh ks-console-pr-$PR_ID
        echo 'Access to the preview console:'
        echo http://ks-console-pr-$PR_ID.kscpr.top

    - name: Build image
      if: github.event_name == 'push'
      run: docker build . --file Dockerfile --tag $IMAGE_NAME

    - name: Docker login
      if: github.event_name == 'push'
      uses: azure/docker-login@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Push image
      if: github.event_name == 'push'
      run: |
          IMAGE_ID=$DOCKERHUB_REPO/$IMAGE_NAME
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
